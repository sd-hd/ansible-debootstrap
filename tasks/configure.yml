---

- block:
  # gets rid of LOCALE warnings
  - name: generate locales
    command: "chroot {{ _tgt_root }} locale-gen {{ locales|join( ) }}"

  - debug:
      var: _tgt_devices

  - name: place templates in /etc
    template:
      src: "{{ item.src }}"
      dest: "{{ _tgt_root }}/etc/{{ item.dest|default(item.src) }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
    with_items:
    - { src: 'default/grub' }
    - { src: 'fstab' }
    - { src: 'sshd_config', dest: 'ssh/sshd_config'}

  - name: delete supplied keys
    file:
      state: absent
      dest: "{{ _tgt_root }}/etc/ssh/ssh_host_{{ item.algo }}_key"
    with_items: "{{ ssh_host_keys }}"

  - name: delete supplied pub keys
    file:
      state: absent
      dest: "{{ _tgt_root }}/etc/ssh/ssh_host_{{ item.algo }}_key.pub"
    with_items: "{{ ssh_host_keys }}"

  - name: generate (better) ssh host keys
    command: >
      chroot {{ _tgt_root }} ssh-keygen -q -N '' -t {{ item.algo }} -b {{ item.keylen }}
      -f /etc/ssh/ssh_host_{{ item.algo }}_key
    with_items: "{{ ssh_host_keys }}"

  - name: set root password
    command: >
      chroot {{ _tgt_root }} usermod -p '{{ root_password }}' root
    when: root_password is defined

  - name: create system groups
    command: addgroup --system {{ item }}
    # group:
    #   name: {{ item }}
    #   state: present
    #   system: yes
    with_items:
    - lxd
    - docker
    - libvirt
    - ceph
    - lpadmin
    - sambashare
    - haproxy


  - name: create users
    command: >
      chroot {{ _tgt_root }} useradd -m -U {% if 'uid' in item.value %}-u {{ item.value['uid'] }} {% endif %}
      {% if 'groups' in item.value %} -G {{ item.value.groups|join(',') }}{% endif %}
      {% if 'password' in item.value %} -p {{ item.value['password'] }}{% endif %}
       -s {{ item.value['shell']|default('/bin/bash') }} {{ item.key }}
    with_dict: "{{ users }}"

  - name: add ssh directory
    file:
      state: directory
      dest: "{{ _tgt_root }}/home/{{ item.key }}/.ssh"
      mode: "0700"
    when: item.value['authorized_keys'] is defined
    with_dict: "{{ users }}"

  - name: add ssh keys for users
    template:
      src: authorized_keys
      dest: "{{ _tgt_root }}/home/{{ item.key }}/.ssh/authorized_keys"
      mode: '0644'
    with_dict: "{{ users }}"
    when: item.value['authorized_keys'] is defined

  - name: change ssh key ownership
    command: "chroot {{ _tgt_root }} chown -R {{ item.key }}:{{ item.key }} /home/{{ item.key }}/.ssh"
    with_dict: "{{ users }}"
    when: item.value['authorized_keys'] is defined

  - name: copy local netplan config to remote if exists
    local_action: stat path="{{ inventory_hostname }}/01-netcfg.yaml"
    register: _netplan_config

  - name: Copy any host based netplan file
    copy:
      src={{ inventory_hostname }}/01-netcfg.yaml
      dest=/etc/netplan/
    when: _netplan_config.stat.exists

  - name: set hostname
    copy:
      dest: "{{ _tgt_root }}/etc/hostname"
      content: "{{ tgt_hostname }}"
      owner: "root"
      group: "root"
      mode: "0644"
    when: tgt_hostname is defined

  - name: trigger udev to detect new block devices
    command: udevadm trigger
  - name: wait for udev to complete its refresh
    command: udevadm settle

  - name: set up grub
    command: chroot {{ _tgt_root }} update-grub

  - name: Check grup-probe zfs
    command: grub-probe /
    ## TODO: ouput == zfs
    tags:
      - grub_install

  - name: Update Initramfs
    command: update-initramfs -u -k all
    tags:
      - grub_install

  - name: install boot loader (grub-pc)
    command: chroot {{ _tgt_root }} grub-install {{ item['device'] }}
    with_items: "{{ layout }}"
    when: not grub_efi|default(False) and not item['skip_grub']|default(False)

  - name: Install Grub EFI
    command: grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --recheck --no-floppy
    when: grub_efi|default(True)
    tags:
      - grub_install


  - name: Check Grub ZFS
    command: ls /boot/grub/*/zfs.mod
    tags:
      - grub_install

  - name: Remove zpool cache file
    file: path=/etc/zfs/zpool.cache state=absent
    tags:
      - grub_install

- rescue:
  - name: Cleanup
    include: cleanup.yml

  - name: wipe
    include: wipe.yml
